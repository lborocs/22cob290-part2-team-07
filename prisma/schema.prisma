// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  uid              String                 @id @default(uuid())
  email            String                 @unique
  name             String
  roles            Role[]
  secure           Secure?
  leads            Project[]
  assigned         Task[]
  posts            Post[]
  overridesTopic   POverrideUserTopic[]
  overridesPost    POverrideUserPost[]
  overridesProject POverrideUserProject[]
}

model Secure {
  user     User   @relation(fields: [userUid], references: [uid])
  userUid  String @id
  password String
}

model Task {
  uid         Int       @id @default(autoincrement())
  assignees   User[]
  project     Project?  @relation(fields: [projectId], references: [uid])
  projectId   Int?
  subtasks    Subtask[]
  name        String
  description String
  createdAt   DateTime  @default(now())
  deadline    DateTime?
  workerHours Int
  status      Int       @default(0)
  // SQLite does not support enums :(
}

model Subtask {
  uid         Int      @id @default(autoincrement())
  parent      Task     @relation(fields: [parentId], references: [uid])
  parentId    Int
  name        String
  workerHours Int
  createdAt   DateTime @default(now())
  done        Boolean  @default(false)
}

model Project {
  uid           Int                    @id @default(autoincrement())
  leader        User                   @relation(fields: [leaderId], references: [uid])
  leaderId      String
  client        Client                 @relation(fields: [clientId], references: [uid])
  clientId      Int
  name          String
  description   String
  createdAt     DateTime               @default(now())
  deadline      DateTime
  tasks         Task[]
  overrideRoles POverrideRoleProject[]
  overrideUsers POverrideUserProject[]
}

model Client {
  uid            Int       @id @default(autoincrement())
  name           String
  representative String
  email          String
  address        String?
  phone          String?
  website        String?
  projects       Project[]
}

model Topic {
  uid           Int                  @id @default(autoincrement())
  name          String               @unique
  posts         Post[]
  overrideRoles POverrideRoleTopic[]
  overrideUsers POverrideUserTopic[]
}

model Post {
  uid           Int                 @id @default(autoincrement())
  owner         User                @relation(fields: [ownerId], references: [uid])
  ownerId       String
  topic         Topic               @relation(fields: [topicId], references: [uid])
  topicId       Int
  title         String
  markdown      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  assets        Asset[]
  overrideRoles POverrideRolePost[]
  overrideUsers POverrideUserPost[]
}

model Asset {
  uid      String @id @default(uuid())
  name     String
  mimeType String
  posts    Post[]
}

// Permissions

model Role {
  uid              Int                    @id @default(autoincrement())
  rank             Int
  allow            Int // Permissions
  deny             Int // Permissions
  name             String
  users            User[]
  overridesTopic   POverrideRoleTopic[]
  overridesPost    POverrideRolePost[]
  overridesProject POverrideRoleProject[]
}

// model POverrideRole {
//   role    Role @relation(fields: [roleUid], references: [uid])
//   roleUid Int
//   allow   Int // Permission
//   deny    Int // Permission
// }
// model POverrideUser {
//   user     User   @relation(fields: [userUid], references: [uid])
//   userUid  String
//   allow    Int // Permission
//   deny     Int // Permission
// }

model POverrideRoleTopic {
  role     Role  @relation(fields: [roleUid], references: [uid])
  roleUid  Int
  allow    Int // Permission
  deny     Int // Permission
  topic    Topic @relation(fields: [topicUid], references: [uid])
  topicUid Int

  @@unique([roleUid, topicUid])
}

model POverrideUserTopic {
  user     User   @relation(fields: [userUid], references: [uid])
  userUid  String
  allow    Int // Permission
  deny     Int // Permission
  topic    Topic  @relation(fields: [topicUid], references: [uid])
  topicUid Int

  @@unique([userUid, topicUid])
}

model POverrideRolePost {
  role    Role @relation(fields: [roleUid], references: [uid])
  roleUid Int
  allow   Int // Permission
  deny    Int // Permission
  post    Post @relation(fields: [postUid], references: [uid])
  postUid Int

  @@unique([roleUid, postUid])
}

model POverrideUserPost {
  user    User   @relation(fields: [userUid], references: [uid])
  userUid String
  allow   Int // Permission
  deny    Int // Permission
  post    Post   @relation(fields: [postUid], references: [uid])
  postUid Int

  @@unique([userUid, postUid])
}

model POverrideRoleProject {
  role       Role    @relation(fields: [roleUid], references: [uid])
  roleUid    Int
  allow      Int // Permission
  deny       Int // Permission
  project    Project @relation(fields: [projectUid], references: [uid])
  projectUid Int

  @@unique([roleUid, projectUid])
}

model POverrideUserProject {
  user       User    @relation(fields: [userUid], references: [uid])
  userUid    String
  allow      Int // Permission
  deny       Int // Permission
  project    Project @relation(fields: [projectUid], references: [uid])
  projectUid Int

  @@unique([userUid, projectUid])
}

// Active registration links

model Register {
  code String @id
}
