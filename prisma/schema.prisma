// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  uid               String              @id @default(uuid())
  email             String              @unique
  name              String
  password          String
  leads             Project[]
  assigned          Task[]
  posts             Post[]
  PermissionGlobal  PermissionGlobal?
  PermissionTopic   PermissionTopic[]
  PermissionPost    PermissionPost[]
  PermissionProject PermissionProject[]
}

model Task {
  uid         Int       @id @default(autoincrement())
  assignees   User[]
  project     Project?  @relation(fields: [projectId], references: [uid])
  projectId   Int?
  subtasks    Subtask[]
  name        String
  description String
  createdAt   DateTime  @default(now())
  deadline    DateTime?
  workerHours Int
  status      Int       @default(0)
  // SQLite does not support enums :(
}

model Subtask {
  uid         Int      @id @default(autoincrement())
  parent      Task     @relation(fields: [parentId], references: [uid])
  parentId    Int
  name        String
  workerHours Int
  createdAt   DateTime @default(now())
  done        Boolean  @default(false)
}

model Project {
  uid               Int                 @id @default(autoincrement())
  leader            User                @relation(fields: [leaderId], references: [uid])
  leaderId          String
  client            Client              @relation(fields: [clientId], references: [uid])
  clientId          Int
  name              String
  description       String
  createdAt         DateTime            @default(now())
  deadline          DateTime
  tasks             Task[]
  PermissionProject PermissionProject[]
}

model Client {
  uid            Int       @id @default(autoincrement())
  name           String
  representative String
  email          String
  address        String?
  phone          String?
  website        String?
  projects       Project[]
}

model Topic {
  uid             Int               @id @default(autoincrement())
  name            String            @unique
  posts           Post[]
  PermissionTopic PermissionTopic[]
}

model Post {
  uid            Int              @id @default(autoincrement())
  owner          User             @relation(fields: [ownerId], references: [uid])
  ownerId        String
  topic          Topic            @relation(fields: [topicId], references: [uid])
  topicId        Int
  title          String
  markdown       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assets         Asset[]
  PermissionPost PermissionPost[]
}

model Asset {
  uid      String @id @default(uuid())
  name     String
  mimeType String
  posts    Post[]
}

// Permissions

//  Create/Delete a topic
// Create/Delete a project
// Create/Delete a client
// Manage role permissions
// Topic
// Create/Delete a post
// Read posts
// Post
// Read post
// Edit post
// Delete post
// Project
// Create/Delete task
// Assign to task
// Access manager dashboard
// Assign rank (Employee, Manager, Team Leader) based on permissions

model PermissionGlobal {
  user    User   @relation(fields: [userUid], references: [uid])
  userUid String @id

  topicCreate   Boolean
  topicDelete   Boolean
  projectCreate Boolean
  projectDelete Boolean
  clientCreate  Boolean
  clientDelete  Boolean
}

model PermissionTopic {
  user     User   @relation(fields: [userUid], references: [uid])
  userUid  String
  topic    Topic  @relation(fields: [topicUid], references: [uid])
  topicUid Int

  postCreate Boolean
  postDelete Boolean
  postEdit   Boolean

  @@id([userUid, topicUid])
}

model PermissionPost {
  user    User   @relation(fields: [userUid], references: [uid])
  userUid String
  post    Post   @relation(fields: [postUid], references: [uid])
  postUid Int

  postRead   Boolean
  postEdit   Boolean
  postDelete Boolean

  @@id([userUid, postUid])
}

model PermissionProject {
  user       User    @relation(fields: [userUid], references: [uid])
  userUid    String
  project    Project @relation(fields: [projectUid], references: [uid])
  projectUid Int

  taskCreate  Boolean
  taskDelete  Boolean
  assignTasks Boolean

  @@id([userUid, projectUid])
}
